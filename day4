mumbai:

ami name : amzn2-ami-kernel-5.10-hvm-2.0.20240131.0-x86_64-gp2
amazon linux 2 : latest vrsion
ami-06b72b3b2a773be2b


us-east-1:


amazon linux 2 : latest vrsion
amzn2-ami-kernel-5.10-hvm-2.0.20240131.0-x86_64-gp2
ami-0cf10cdf9fcd62d37





  root@main-tf:~# cat 8_1.tf 
provider "aws" {
region="ap-south-1"
}


data "aws_ami" "app_ami" {
  owners = ["amazon"]
  most_recent      = true
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}

resource "aws_instance" "ec2" {
  ami                     = data.aws_ami.app_ami.id 
 instance_type="t2.micro"
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

-----------------------------------------------------


root@main-tf:~# cat 8_1.tf 
provider "aws" {
region="ap-south-1"
}


data "aws_ami" "app_ami" {
  owners = ["amazon"]
  most_recent      = true
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}

resource "aws_instance" "ec2" {
  ami                     = data.aws_ami.app_ami.id 
 instance_type=data.aws_instance.foo.instance_type
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}


data "aws_instance" "foo" {
  instance_id = "i-05d51c6a4c400bddb"
}

#output "values-inst" {
#value=data.aws_instance.foo
#}




====================================================================







root@main-tf:~/test# ls
modules  projects
root@main-tf:~/test# tree
.
├── modules
│   ├── ec2
│   │   ├── ec2.tf
│   │   └── variable.tf
│   └── storage
│       └── s3.tf
└── projects
    ├── projectA-dev
    │   ├── main.tf
    │   ├── terraform.tfstate
    │   └── terraform.tfstate.backup
    └── projectB-prod
        ├── main.tf
        ├── terraform.tfstate
        └── terraform.tfstate.backup

6 directories, 9 files





root@main-tf:~/test# ls
modules  projects
root@main-tf:~/test# cd modules/
root@main-tf:~/test/modules# ls
ec2  storage
root@main-tf:~/test/modules# cd ec2/
root@main-tf:~/test/modules/ec2# ls
ec2.tf  variable.tf
root@main-tf:~/test/modules/ec2# cat ec2.tf 
provider "aws" {
region= "ap-south-1"
}

resource "aws_instance" "myec2" {
   ami = "ami-06b72b3b2a773be2b"
   instance_type = var.type
tags= {
Name= var.name
}
}






root@main-tf:~/test/modules/storage# cat s3.tf 
resource "aws_s3_bucket" "example" {
  bucket = "my-tf-test-buckiet-jpmccccccccccc"

  tags = {
    Environment = "Dev"
  }
}







root@main-tf:~/test/modules/ec2# cat variable.tf 
variable "type" {
default="t2.micro"
}

variable "name"{
default="dev-server"
}
root@main-tf:~/test/modules/ec2# ls
ec2.tf  variable.tf








root@main-tf:~/test/projects/projectA-dev# cat main.tf 
provider "aws" {
region="ap-south-1"
}

module "ec2mod" {
source= "/root/test/modules/ec2"
type="t3.micro"
}

module "s3mod" {
source="/root/test/modules/storage"
}







root@main-tf:~/test/projects/projectB-prod# cat main.tf 
provider "aws" {
region="ap-south-1"
}

module "ec2mod" {
source= "/root/test/modules/ec2"
type="t3.medium"
name="ec2-prod-server"
}




====================================




-- state lock  : local env : default there



-- remote common backend : --state lock , not applied bydefault...

-- create an s3 bucket first .. raman-jpmcccccccccccc-bucketbckend

backend.tf :

terraform {
  backend "s3" {
    bucket = "raman-jpmcccccccccccc-bucketbckend"
    key    = "terraform/state"
    region = "ap-south-1"
  }
}





vi backend.tf
  638  ls
  639  terraform validate
  640  terraform plan
  641  terraform init
  642  terraform plan
  643  terraform apply
  644  ls
  645  clear
  646  vi first.tf 
  647  terraform apply


---------------------------------

how to apply state lock on remote bckend :



======================================================
