==================================

diff approaches :

1.
default value in variables block

2.
nt provide a default value in var block
ui mode

3
terraform.tfvars(secrets) and custom.tfvars (raman.tfvars, sonali.tfvars)

4.env varibles

export TF_VAR_instance_type=""

5. assgn a var on the fly



root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  instance_type           = var.type
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

root@main-tf:~# cat variable.tf
variable "rk" {
default= "0.0.0.0/0"
}
variable "type" {
default="t2.micro"
}
root@main-tf:~# cat rk.tfvars
type="t2.large"




 terraform plan
  405  clear
  406  ls
  407  vi variable.tf
  408  vi rk.tfvars
  409  cat ec2.tf
  410  cat variable.tf
  411  ls
  412  terraform plan -var-file="rk.tfvars"
  413  terraform plan
  414  ls
  415  vi variable.tf
  416  terraform plan
  417  terraform plan -var-file="rk.tfvars"
  418  vi variable.tf
  419  clear
  420  ls
  421  cat rk.tfvars
  422  cat variable.tf
  423  terraform plan -var="type=t2.medium"


------------------------------------------------


list  :


root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  instance_type           = var.type[0]
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

root@main-tf:~# cat variable.tf
variable "rk" {
default= "0.0.0.0/0"
}
variable "type" {
type=list
default=["t2.micro","t2.medium","t2.large"]
}


------------------------------------------

map:

root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
 # instance_type           = var.type["dev"]
  instance_type           = var.type["prod"]
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

root@main-tf:~# cat variable.tf
variable "rk" {
default= "0.0.0.0/0"
}
variable "type" {
type= map
default= {
dev="t2.micro"
uat="t2.medium"
prod="t2.large"
}
}



==========================================================================



root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  #instance_type           = var.type["prod"]
 instance_type="t2.micro"
 count=3
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

#variable "type" {
#type= list
#default=["t2.micro","t2.medium","t2.large"]
#}


-------------------------------------------------------

provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  #instance_type           = var.type["prod"]
 instance_type=var.type[count.index]
 count=3
  availability_zone= "ap-south-1b"
  tags = {
    Name = var.name[count.index]
  }
}

variable "type" {
type= list
default=["t2.micro","t2.medium","t2.large"]
}

variable "name" {
type= list
default=["dev","uat","prod"]
}

======================================
root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  #instance_type           = var.type["prod"]
 instance_type=var.type[count.index]
 count=3
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2-${var.name[count.index]}"
  }
}

variable "type" {
type= list
default=["t2.micro","t2.medium","t2.large"]
}

variable "name" {
type= list
default=["dev","uat","prod"]
}




==================================================

try to do the same , create 3 iam-users with dif names .





==============================================================


LAB : REMOTE PROVISIONER :


provider "aws" {
region= "ap-south-1"
}

resource "aws_instance" "myec2" {
   ami = "ami-06b72b3b2a773be2b"                               #amazon linux ami
   instance_type = "t2.micro"
   key_name = "jpmc-mum-key"                                  # Create a keypair in the region # pub key arg.
   vpc_security_group_ids  = [aws_security_group.allow_ssh.id]
   tags= {
   Name= "web-server"
   }

   provisioner "remote-exec" {
     inline = [
       "sudo amazon-linux-extras install -y nginx1.12",
       "sudo systemctl start nginx"
     ]

   connection {
     type = "ssh"
     user = "ec2-user"
     private_key = file("./raman.pem")    #copy the content of the private keyfile ; create a file in /root/app1 named nvirginia.pem and then paste the content into this file #
     host = self.public_ip
#    host = aws_instance.myec2.public_ip
   }
   }
}

### NOTE - Adding a new security group resource to allow the terraform provisioner from laptop to connect to EC2 Instance via SSH.

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow SSH inbound traffic"
  vpc_id      = "vpc-027b7a70751225ee4"

  ingress {
    description = "SSH into VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
 ingress {
    description = "SSH into VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    description = "Outbound Allowed"
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}



================================================================


root@main-tf:~# cat local.tf
provider "aws" {
region= "ap-south-1"
}

resource "aws_instance" "myec2" {
   ami = "ami-06b72b3b2a773be2b"
   instance_type = "t2.micro"

   provisioner "local-exec" {
    command = "echo ${aws_instance.myec2.private_ip} >> private_ips.txt"
}
}

===========================================================================
