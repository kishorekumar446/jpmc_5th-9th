==================================

diff approaches :

1.
default value in variables block

2.
nt provide a default value in var block
ui mode

3
terraform.tfvars(secrets) and custom.tfvars (raman.tfvars, sonali.tfvars)

4.env varibles

export TF_VAR_instance_type=""

5. assgn a var on the fly



root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  instance_type           = var.type
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

root@main-tf:~# cat variable.tf
variable "rk" {
default= "0.0.0.0/0"
}
variable "type" {
default="t2.micro"
}
root@main-tf:~# cat rk.tfvars
type="t2.large"




 terraform plan
  405  clear
  406  ls
  407  vi variable.tf
  408  vi rk.tfvars
  409  cat ec2.tf
  410  cat variable.tf
  411  ls
  412  terraform plan -var-file="rk.tfvars"
  413  terraform plan
  414  ls
  415  vi variable.tf
  416  terraform plan
  417  terraform plan -var-file="rk.tfvars"
  418  vi variable.tf
  419  clear
  420  ls
  421  cat rk.tfvars
  422  cat variable.tf
  423  terraform plan -var="type=t2.medium"


------------------------------------------------


list  :


root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  instance_type           = var.type[0]
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

root@main-tf:~# cat variable.tf
variable "rk" {
default= "0.0.0.0/0"
}
variable "type" {
type=list
default=["t2.micro","t2.medium","t2.large"]
}


------------------------------------------

map:

root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
 # instance_type           = var.type["dev"]
  instance_type           = var.type["prod"]
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

root@main-tf:~# cat variable.tf
variable "rk" {
default= "0.0.0.0/0"
}
variable "type" {
type= map
default= {
dev="t2.micro"
uat="t2.medium"
prod="t2.large"
}
}



==========================================================================



root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  #instance_type           = var.type["prod"]
 instance_type="t2.micro"
 count=3
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2"
  }
}

#variable "type" {
#type= list
#default=["t2.micro","t2.medium","t2.large"]
#}


-------------------------------------------------------

provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  #instance_type           = var.type["prod"]
 instance_type=var.type[count.index]
 count=3
  availability_zone= "ap-south-1b"
  tags = {
    Name = var.name[count.index]
  }
}

variable "type" {
type= list
default=["t2.micro","t2.medium","t2.large"]
}

variable "name" {
type= list
default=["dev","uat","prod"]
}

======================================
root@main-tf:~# cat ec2.tf
provider "aws" {
region="ap-south-1"
}


resource "aws_instance" "ec2" {
  ami                     = "ami-0a7cf821b91bcccbc" #ubuntu
  #instance_type           = var.type["prod"]
 instance_type=var.type[count.index]
 count=3
  availability_zone= "ap-south-1b"
  tags = {
    Name = "raman-ec2-${var.name[count.index]}"
  }
}

variable "type" {
type= list
default=["t2.micro","t2.medium","t2.large"]
}

variable "name" {
type= list
default=["dev","uat","prod"]
}




==================================================

try to do the same , create 3 iam-users with dif names .





==============================================================


LAB : REMOTE PROVISIONER :


provider "aws" {
region= "ap-south-1"
}

resource "aws_instance" "myec2" {
   ami = "ami-06b72b3b2a773be2b"                               #amazon linux ami
   instance_type = "t2.micro"
   key_name = "jpmc-mum-key"                                  # Create a keypair in the region # pub key arg.
   vpc_security_group_ids  = [aws_security_group.allow_ssh.id]
   tags= {
   Name= "web-server"
   }

   provisioner "remote-exec" {
     inline = [
       "sudo amazon-linux-extras install -y nginx1.12",
       "sudo systemctl start nginx"
     ]

   connection {
     type = "ssh"
     user = "ec2-user"
     private_key = file("./raman.pem")    #copy the content of the private keyfile ; create a file in /root/app1 named nvirginia.pem and then paste the content into this file #
     host = self.public_ip
#    host = aws_instance.myec2.public_ip
   }
   }
}

### NOTE - Adding a new security group resource to allow the terraform provisioner from laptop to connect to EC2 Instance via SSH.

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow SSH inbound traffic"
  vpc_id      = "vpc-027b7a70751225ee4"

  ingress {
    description = "SSH into VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
 ingress {
    description = "SSH into VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    description = "Outbound Allowed"
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}



================================================================


root@main-tf:~# cat local.tf
provider "aws" {
region= "ap-south-1"
}

resource "aws_instance" "myec2" {
   ami = "ami-06b72b3b2a773be2b"
   instance_type = "t2.micro"

   provisioner "local-exec" {
    command = "echo ${aws_instance.myec2.private_ip} >> private_ips.txt"
}
}

===========================================================================

https://developer.hashicorp.com/terraform/language/functions/file
------


provider "aws" {
  region     = var.region
  
}

locals {
  time = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
}

variable "region" {
  default = "ap-south-1"
}

variable "tags" {
  type = list
  default = ["firstec2","secondec2"]
}

variable "ami" {
  type = map
  default = {
    "us-east-1" = "ami-0cf10cdf9fcd62d37"
    "us-east-2" = "ami-0cf7b2f456cd5efd4"
    "ap-south-1" = "ami-06b72b3b2a773be2b"
  }
}


resource "aws_instance" "app-dev" {
   ami = lookup(var.ami,var.region)  #in terraform console: lookup({us-east-1="ami1",us-east-2="ami2",ap-south-1="ami3"},"ap-south-1","NA") #
   instance_type = "t2.micro"
   count = 2

   tags = {
     Name = element(var.tags,count.index)    # element(["firstec2","secondec2"],1) #
   }
}


output "timestamp" {
  value = local.time
}

================================================



root@main-tf:~# cat ws.tf
provider "aws" {
  region     = "ap-south-1"

}

resource "aws_instance" "myec2" {
   ami = "ami-06b72b3b2a773be2b"
   instance_type = lookup(var.instance_type,terraform.workspace)
tags = {
    Name = lookup(var.name,terraform.workspace)
  }
}

variable "instance_type" {
  type = map

  default = {
    default = "t2.nano"
    dev     = "t2.micro"
    prod     = "t2.large"
  }
}

variable "name"{
type=map
default= {
default="IT server"
dev="dev-server"
prod="prod-server"
}
}




 terraform workspace list
  570  terraform workspace -h
  571  terraform workspace select default
  572  terraform validate
  573  terraform plan
  574  terraform workspace select
  575  terraform workspace select -h
  576  terraform workspace list
  577  terraform workspace select dev
  578  terraform workspace list
  579  terraform workspace show
  580  terraform plan
  581  terraform workspace select prod
  582  terraform plan
  583  ls
  584  cd terraform.tfstate.d/
  585  ls
  586  cd prod/
  587  ls
  588  cd ..
  589  ls
  590  cd ..
  591  ls
  592  terraform apply
  593  terraform workspace select dev
  594  terraform apply
  595  terraform statelist
  596  terraform state list
  597  terraform workspace show
  598  ls
  599  cd terraform.tfstate.d/
  600  ls
  601  cd dev/
  602  ls
  603  cd ..
  604  ls
  605  cd ..
  606  ls
  607  cat terraform.tfstate
  608  terraform destroy
  609  ls
  610  cd terraform.tfstate.d/
  611  ls
  612  cd dev/
  613  ls
  614  cat terraform.tfstate


-===================================================================
